import random
import numpy as np

# Example distance matrix
distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

num_locations = len(distance_matrix)

def route_distance(route):
    return sum(distance_matrix[route[i]][route[i+1]] for i in range(len(route)-1))

def fitness(route):
    return 1 / route_distance(route)

def crossover(p1, p2):
    start, end = sorted(random.sample(range(len(p1)), 2))
    child = [None]*len(p1)
    child[start:end] = p1[start:end]
    pos = end
    for x in p2:
        if x not in child:
            if pos >= len(p1): pos = 0
            child[pos] = x
            pos += 1
    return child

def mutate(route):
    i, j = random.sample(range(len(route)), 2)
    route[i], route[j] = route[j], route[i]
    return route

# Initialize population
population = [random.sample(range(num_locations), num_locations) for _ in range(50)]

for generation in range(500):
    population = sorted(population, key=route_distance)
    new_population = population[:5]  # elitism
    while len(new_population) < 50:
        parents = random.sample(population[:25], 2)
        child = crossover(*parents)
        if random.random() < 0.1:
            child = mutate(child)
        new_population.append(child)
    population = new_population

best_route = min(population, key=route_distance)
print("Best route:", best_route, "Distance:", route_distance(best_route))
