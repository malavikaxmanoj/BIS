import numpy as np
import matplotlib.pyplot as plt

# --- Objective Function (Rastrigin) ---
def rastrigin(X):
    x, y = X
    return 20 + (x**2 - 10*np.cos(2*np.pi*x)) + (y**2 - 10*np.cos(2*np.pi*y))

# --- Lévy Flight ---
def levy_flight(Lambda):
    sigma = (np.math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /
             (np.math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)
    u = np.random.normal(0, sigma, 2)
    v = np.random.normal(0, 1, 2)
    step = u / np.abs(v)**(1 / Lambda)
    return step

# --- Cuckoo Search Parameters ---
n = 20                 # number of nests
pa = 0.25              # discovery rate (fraction of nests replaced)
alpha = 0.01           # step size
n_iter = 100           # iterations
bounds = [-5.12, 5.12] # search space

# --- Initialize nests randomly ---
nests = np.random.uniform(bounds[0], bounds[1], (n, 2))
fitness = np.array([rastrigin(x) for x in nests])
best_nest = nests[np.argmin(fitness)]
best_score = np.min(fitness)

# --- Main Loop ---
for t in range(n_iter):
    for i in range(n):
        # Lévy flight step
        new_nest = nests[i] + alpha * levy_flight(1.5)
        new_nest = np.clip(new_nest, bounds[0], bounds[1])
        f_new = rastrigin(new_nest)
        if f_new < fitness[i]:
            nests[i] = new_nest
            fitness[i] = f_new

    # Abandon some nests (pa fraction)
    num_abandon = int(pa * n)
    abandon_indices = np.random.choice(range(n), num_abandon, replace=False)
    for idx in abandon_indices:
        nests[idx] = np.random.uniform(bounds[0], bounds[1], 2)
        fitness[idx] = rastrigin(nests[idx])

    # Update best
    current_best_idx = np.argmin(fitness)
    if fitness[current_best_idx] < best_score:
        best_score = fitness[current_best_idx]
        best_nest = nests[current_best_idx]

    if t % 10 == 0:
        print(f"Iteration {t}: Best = {best_score:.5f}")

print("\nOptimal solution found:")
print("x =", best_nest, "f(x) =", best_score)

# --- Visualization ---
X = np.linspace(bounds[0], bounds[1], 100)
Y = np.linspace(bounds[0], bounds[1], 100)
X, Y = np.meshgrid(X, Y)
Z = 20 + (X**2 - 10*np.cos(2*np.pi*X)) + (Y**2 - 10*np.cos(2*np.pi*Y))

plt.figure(figsize=(6,5))
plt.contourf(X, Y, Z, 50, cmap='viridis')
plt.plot(best_nest[0], best_nest[1], 'r*', markersize=12, label='Best Solution')
plt.title('Cuckoo Search Optimization on Rastrigin Function')
plt.legend()
plt.colorbar(label='f(x, y)')
plt.xlabel('x')
plt.ylabel('y')
plt.show()
