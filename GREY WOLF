import numpy as np
import matplotlib.pyplot as plt

# --- Parameters ---
farm_size = 1000  # meters
n_turbines = 6
R = 40  # turbine radius
V0 = 12  # free stream wind speed (m/s)
Cp = 0.45
rho = 1.225
A = np.pi * R**2
k = 0.04  # wake decay constant
a = 1/3   # induction factor
min_dist = 8 * R  # minimum spacing (m)

# --- Wake model: Jensen's wake effect ---
def wake_velocity(x, y, turbines):
    V = V0
    for (xt, yt) in turbines:
        if x > xt and abs(y - yt) < (k * (x - xt) / R + 1) * R:
            V = V0 * (1 - 2 * a / (1 + k * (x - xt) / R) ** 2)
    return V

# --- Objective: total power (maximize) ---
def total_power(positions):
    turbines = positions.reshape(n_turbines, 2)
    # Check spacing constraint
    for i in range(n_turbines):
        for j in range(i + 1, n_turbines):
            dist = np.linalg.norm(turbines[i] - turbines[j])
            if dist < min_dist:
                return -1e6  # penalty
    total_P = 0
    for i in range(n_turbines):
        V_local = wake_velocity(turbines[i][0], turbines[i][1], turbines[:i])
        total_P += 0.5 * rho * A * Cp * V_local ** 3
    return total_P

# --- Grey Wolf Optimizer (GWO) ---
def gwo(func, n_wolves=20, max_iter=80, lb=0, ub=farm_size):
    dim = n_turbines * 2
    pos = np.random.uniform(lb, ub, (n_wolves, dim))
    fitness = np.array([func(p) for p in pos])

    alpha, beta, delta = pos[np.argmax(fitness)], np.zeros(dim), np.zeros(dim)
    alpha_score, beta_score, delta_score = np.max(fitness), -np.inf, -np.inf

    for t in range(max_iter):
        a = 2 - t * (2 / max_iter)
        for i in range(n_wolves):
            A1, A2, A3 = a * (2 * np.random.rand(dim) - 1), a * (2 * np.random.rand(dim) - 1), a * (2 * np.random.rand(dim) - 1)
            C1, C2, C3 = 2 * np.random.rand(dim), 2 * np.random.rand(dim), 2 * np.random.rand(dim)
            D_alpha, D_beta, D_delta = abs(C1 * alpha - pos[i]), abs(C2 * beta - pos[i]), abs(C3 * delta - pos[i])
            X1, X2, X3 = alpha - A1 * D_alpha, beta - A2 * D_beta, delta - A3 * D_delta
            pos[i] = np.clip((X1 + X2 + X3) / 3, lb, ub)

            score = func(pos[i])
            if score > alpha_score:
                delta_score, delta = beta_score, beta.copy()
                beta_score, beta = alpha_score, alpha.copy()
                alpha_score, alpha = score, pos[i].copy()
            elif score > beta_score:
                delta_score, delta = beta_score, beta.copy()
                beta_score, beta = score, pos[i].copy()
            elif score > delta_score:
                delta_score, delta = score, pos[i].copy()

        if t % 10 == 0:
            print(f"Iteration {t}: Best Power = {alpha_score/1e6:.3f} MW")
    return alpha, alpha_score

# --- Run GWO Optimization ---
best_pos, best_power = gwo(total_power, n_wolves=25, max_iter=80)
best_turbines = best_pos.reshape(n_turbines, 2)

print("\nOptimized Turbine Positions (x, y):")
print(best_turbines)
print(f"Maximum Total Power = {best_power/1e6:.3f} MW")

# --- Visualization ---
plt.figure(figsize=(7,7))
plt.scatter(best_turbines[:,0], best_turbines[:,1], color='blue', s=120, label='Turbines')
for i in range(n_turbines):
    circle = plt.Circle((best_turbines[i,0], best_turbines[i,1]), R, color='gray', fill=False, linestyle='--')
    plt.gca().add_patch(circle)
plt.xlim(0, farm_size)
plt.ylim(0, farm_size)
plt.xlabel('X position (m)')
plt.ylabel('Y position (m)')
plt.title('Optimized Wind Turbine Layout using Grey Wolf Optimizer')
plt.legend()
plt.grid(True)
plt.show()
