import numpy as np
import pandas as pd
from gplearn.genetic import SymbolicRegressor
from gplearn.functions import make_function

# --- Step 1: Create synthetic dataset ---
np.random.seed(42)
n_samples = 200

kills = np.random.randint(0, 10, n_samples)
time_survived = np.random.uniform(1, 20, n_samples)
items = np.random.randint(0, 6, n_samples)
damage = np.random.uniform(5, 50, n_samples)
skill_efficiency = np.random.uniform(0.5, 1.0, n_samples)

# True (hidden) relationship (for testing)
score = (10 * kills + 5 * items + 2 * time_survived - 0.5 * damage) * skill_efficiency + np.random.normal(0, 5, n_samples)

data = pd.DataFrame({
    "kills": kills,
    "time_survived": time_survived,
    "items": items,
    "damage": damage,
    "skill_efficiency": skill_efficiency,
    "score": score
})

# --- Step 2: Prepare data ---
X = data[["kills", "time_survived", "items", "damage", "skill_efficiency"]]
y = data["score"]

# --- Step 3: Define the Gene Expression model ---
est_gp = SymbolicRegressor(
    population_size=2000,
    generations=30,
    stopping_criteria=0.01,
    p_crossover=0.7,
    p_subtree_mutation=0.1,
    p_hoist_mutation=0.05,
    p_point_mutation=0.1,
    max_samples=0.9,
    verbose=1,
    parsimony_coefficient=0.001,
    random_state=42,
    function_set=['add', 'sub', 'mul', 'div', 'sqrt', 'log', 'sin', 'cos']
)

# --- Step 4: Train model ---
est_gp.fit(X, y)

# --- Step 5: Evaluate ---
preds = est_gp.predict(X)
mse = np.mean((preds - y)**2)
print(f"\nMean Squared Error: {mse:.2f}")
print("\nEvolved Expression:\n", est_gp._program)

# --- Step 6: Maximization ---
# Find input values that maximize predicted score
sample_inputs = X.sample(5)
sample_inputs["predicted_score"] = est_gp.predict(sample_inputs)
print("\nSample Predictions for Best Game Scores:")
print(sample_inputs.sort_values(by="predicted_score", ascending=False))
