import numpy as np

# --- Problem setup ---
jobs = ['J1', 'J2', 'J3', 'J4', 'J5']
processing_times = np.array([5, 2, 7, 3, 4])  # time per job

n_jobs = len(jobs)
n_ants = 20
n_iterations = 50

# --- ACO parameters ---
alpha = 1.0   # pheromone importance
beta = 2.0    # heuristic importance
rho = 0.1     # pheromone evaporation rate
Q = 100        # pheromone deposit constant

# --- Initialization ---
pheromone = np.ones((n_jobs, n_jobs))  # initial pheromone
heuristic = np.zeros((n_jobs, n_jobs))

# --- Heuristic: inverse of job time difference ---
for i in range(n_jobs):
    for j in range(n_jobs):
        if i != j:
            heuristic[i][j] = 1.0 / (processing_times[j] + 1e-6)

# --- Helper: compute total completion time ---
def total_completion_time(order):
    cumulative_time = 0
    total = 0
    for j in order:
        cumulative_time += processing_times[j]
        total += cumulative_time
    return total

# --- Main ACO loop ---
best_order = None
best_cost = float('inf')

for iteration in range(n_iterations):
    all_orders = []
    all_costs = []

    for ant in range(n_ants):
        unvisited = list(range(n_jobs))
        current_job = np.random.choice(unvisited)
        order = [current_job]
        unvisited.remove(current_job)

        while unvisited:
            probs = []
            for j in unvisited:
                tau = pheromone[current_job][j] ** alpha
                eta = heuristic[current_job][j] ** beta
                probs.append(tau * eta)
            probs = np.array(probs)
            probs /= probs.sum()
            next_job = np.random.choice(unvisited, p=probs)
            order.append(next_job)
            unvisited.remove(next_job)
            current_job = next_job

        cost = total_completion_time(order)
        all_orders.append(order)
        all_costs.append(cost)

        if cost < best_cost:
            best_cost = cost
            best_order = order

    # --- Pheromone update ---
    pheromone *= (1 - rho)  # evaporation
    for k in range(n_ants):
        for i in range(n_jobs - 1):
            a = all_orders[k][i]
            b = all_orders[k][i + 1]
            pheromone[a][b] += Q / all_costs[k]

    if iteration % 10 == 0:
        print(f"Iteration {iteration}: Best Cost = {best_cost:.2f}")

# --- Result ---
best_job_sequence = [jobs[i] for i in best_order]
print("\nOptimal Job Order:", " â†’ ".join(best_job_sequence))
print("Minimum Total Completion Time:", best_cost)
